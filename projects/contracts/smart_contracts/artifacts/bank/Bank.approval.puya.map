{
  "version": 3,
  "sources": [
    "../../bank/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUQ;AAAqB;AAArB;AANR;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;;;;AAQK;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGU;AAAA;;AAAoB;;AAApB;AAAP;AACO;AAAA;;AAAA;AAAA;;AAAP;AAEqC;;AAAA;AAApB;AAAA;AAAA;AAAA;AACzB;;;AAC4C;AAAA;;AAAA;AAAhC;AAAA;;AAAA;AAAA;AAIJ;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACO;;AAAA;AAAA;AAAA;AAbV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUO;;AAAA;AAAA;;AAAA;AAAA;;;;AAKP;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGyC;;AAApB;AAAA;AAAA;AAClB;AAAA;AACA;;AAAA;AACO;AAAA;AAAP;AAEA;AAAsB;;;;;;;;AAAtB;;;AAAqD;;;AAArD;AAEY;AAAA;AAAA;AACpB;;;AAC8B;;AAAlB;;AAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcqB;;AAAd;;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"total_deposit\" 0x151f7c75"
    },
    "26": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "28": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "31": {
      "op": "bytec_0 // \"total_deposit\"",
      "defined_out": [
        "\"total_deposit\""
      ],
      "stack_out": [
        "\"total_deposit\""
      ]
    },
    "32": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"total_deposit\"",
        "0"
      ],
      "stack_out": [
        "\"total_deposit\"",
        "0"
      ]
    },
    "33": {
      "op": "app_global_put",
      "stack_out": []
    },
    "34": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "36": {
      "op": "bz main___algopy_default_create@11",
      "stack_out": []
    },
    "39": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "41": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "42": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "43": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "45": {
      "op": "assert",
      "stack_out": []
    },
    "46": {
      "op": "pushbytess 0x9f597c32 0x31214176 // method \"deposit(string,pay)uint64\", method \"withdraw(uint64)uint64\"",
      "defined_out": [
        "Method(deposit(string,pay)uint64)",
        "Method(withdraw(uint64)uint64)"
      ],
      "stack_out": [
        "Method(deposit(string,pay)uint64)",
        "Method(withdraw(uint64)uint64)"
      ]
    },
    "58": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(deposit(string,pay)uint64)",
        "Method(withdraw(uint64)uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(deposit(string,pay)uint64)",
        "Method(withdraw(uint64)uint64)",
        "tmp%6#0"
      ]
    },
    "61": {
      "op": "match deposit withdraw",
      "stack_out": []
    },
    "67": {
      "op": "err"
    },
    "68": {
      "block": "main___algopy_default_create@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "70": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "71": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "73": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "74": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "75": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "76": {
      "subroutine": "smart_contracts.bank.contract.Bank.deposit[routing]",
      "params": {},
      "block": "deposit",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "79": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "80": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "81": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "82": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "84": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "85": {
      "op": "swap",
      "stack_out": [
        "add%0#0",
        "tmp%0#0"
      ]
    },
    "86": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "add%0#0",
        "len%0#0"
      ]
    },
    "87": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "88": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": []
    },
    "89": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "91": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "92": {
      "op": "-",
      "defined_out": [
        "pay_txn#0"
      ],
      "stack_out": [
        "pay_txn#0"
      ]
    },
    "93": {
      "op": "dup",
      "defined_out": [
        "pay_txn#0",
        "pay_txn#0 (copy)"
      ],
      "stack_out": [
        "pay_txn#0",
        "pay_txn#0 (copy)"
      ]
    },
    "94": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "pay_txn#0"
      ],
      "stack_out": [
        "pay_txn#0",
        "gtxn_type%0#0"
      ]
    },
    "96": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_type%0#0",
        "pay",
        "pay_txn#0"
      ],
      "stack_out": [
        "pay_txn#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "97": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "pay_txn#0"
      ],
      "stack_out": [
        "pay_txn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "98": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "pay_txn#0"
      ]
    },
    "99": {
      "op": "dup",
      "stack_out": [
        "pay_txn#0",
        "pay_txn#0 (copy)"
      ]
    },
    "100": {
      "op": "gtxns Receiver",
      "defined_out": [
        "pay_txn#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "pay_txn#0",
        "tmp%0#1"
      ]
    },
    "102": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "pay_txn#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "pay_txn#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "104": {
      "op": "==",
      "defined_out": [
        "pay_txn#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "pay_txn#0",
        "tmp%2#1"
      ]
    },
    "105": {
      "error": "Receiver must be the contract address",
      "op": "assert // Receiver must be the contract address",
      "stack_out": [
        "pay_txn#0"
      ]
    },
    "106": {
      "op": "dup",
      "stack_out": [
        "pay_txn#0",
        "pay_txn#0 (copy)"
      ]
    },
    "107": {
      "op": "gtxns Amount",
      "defined_out": [
        "pay_txn#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "pay_txn#0",
        "tmp%3#1"
      ]
    },
    "109": {
      "op": "dup",
      "stack_out": [
        "pay_txn#0",
        "tmp%3#1",
        "tmp%3#1"
      ]
    },
    "110": {
      "op": "cover 2",
      "defined_out": [
        "pay_txn#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "pay_txn#0",
        "tmp%3#1"
      ]
    },
    "112": {
      "error": "Deposit amount must be greater than zero",
      "op": "assert // Deposit amount must be greater than zero",
      "stack_out": [
        "tmp%3#1",
        "pay_txn#0"
      ]
    },
    "113": {
      "op": "gtxns Sender",
      "defined_out": [
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0"
      ]
    },
    "115": {
      "op": "dup",
      "defined_out": [
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "materialized_values%0#0"
      ]
    },
    "116": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "materialized_values%0#0",
        "maybe_value%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "117": {
      "op": "swap",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "118": {
      "op": "btoi",
      "defined_out": [
        "amount#0",
        "exists#0",
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "exists#0",
        "amount#0"
      ]
    },
    "119": {
      "op": "swap",
      "defined_out": [
        "amount#0",
        "exists#0",
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "exists#0"
      ]
    },
    "120": {
      "op": "bz deposit_else_body@3",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0"
      ]
    },
    "123": {
      "op": "dup",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "amount#0"
      ]
    },
    "124": {
      "op": "dig 3",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "amount#0",
        "tmp%3#1"
      ]
    },
    "126": {
      "op": "+",
      "defined_out": [
        "amount#0",
        "materialized_values%0#0",
        "tmp%3#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "tmp%6#0"
      ]
    },
    "127": {
      "op": "itob",
      "defined_out": [
        "amount#0",
        "encoded_value%0#0",
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "encoded_value%0#0"
      ]
    },
    "128": {
      "op": "dig 2",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "encoded_value%0#0",
        "materialized_values%0#0"
      ]
    },
    "130": {
      "op": "swap",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "materialized_values%0#0",
        "encoded_value%0#0"
      ]
    },
    "131": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0"
      ]
    },
    "132": {
      "block": "deposit_after_if_else@4",
      "stack_in": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "0"
      ]
    },
    "133": {
      "op": "bytec_0 // \"total_deposit\"",
      "defined_out": [
        "\"total_deposit\"",
        "0"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "0",
        "\"total_deposit\""
      ]
    },
    "134": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "135": {
      "error": "check self.total_deposit exists",
      "op": "assert // check self.total_deposit exists",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "maybe_value%1#0"
      ]
    },
    "136": {
      "op": "dig 3",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "maybe_value%1#0",
        "tmp%3#1"
      ]
    },
    "138": {
      "op": "+",
      "defined_out": [
        "tmp%3#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "tmp%9#0"
      ]
    },
    "139": {
      "op": "bytec_0 // \"total_deposit\"",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "tmp%9#0",
        "\"total_deposit\""
      ]
    },
    "140": {
      "op": "swap",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "\"total_deposit\"",
        "tmp%9#0"
      ]
    },
    "141": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0"
      ]
    },
    "142": {
      "op": "dig 1",
      "defined_out": [
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "materialized_values%0#0"
      ]
    },
    "144": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "145": {
      "error": "check self.deposits entry exists",
      "op": "assert // check self.deposits entry exists",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "aggregate%box_get%0#0"
      ]
    },
    "146": {
      "op": "btoi",
      "defined_out": [
        "materialized_values%0#0",
        "maybe_value_converted%1#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "maybe_value_converted%1#0"
      ]
    },
    "147": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "148": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0",
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "149": {
      "op": "swap",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "150": {
      "op": "concat",
      "defined_out": [
        "materialized_values%0#0",
        "tmp%3#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "tmp%5#0"
      ]
    },
    "151": {
      "op": "log",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0"
      ]
    },
    "152": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "1"
      ]
    },
    "153": {
      "op": "return",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0"
      ]
    },
    "154": {
      "block": "deposit_else_body@3",
      "stack_in": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "tmp%3#1"
      ]
    },
    "156": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "encoded_value%1#0"
      ]
    },
    "157": {
      "op": "dig 2",
      "defined_out": [
        "encoded_value%1#0",
        "materialized_values%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "encoded_value%1#0",
        "materialized_values%0#0"
      ]
    },
    "159": {
      "op": "swap",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0",
        "materialized_values%0#0",
        "encoded_value%1#0"
      ]
    },
    "160": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#1",
        "materialized_values%0#0",
        "amount#0"
      ]
    },
    "161": {
      "op": "b deposit_after_if_else@4"
    },
    "164": {
      "subroutine": "smart_contracts.bank.contract.Bank.withdraw[routing]",
      "params": {},
      "block": "withdraw",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "167": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "168": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "169": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "172": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "173": {
      "op": "btoi",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "amount#0"
      ]
    },
    "174": {
      "op": "txn Sender",
      "defined_out": [
        "amount#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "amount#0",
        "materialized_values%0#0"
      ]
    },
    "176": {
      "op": "box_get",
      "defined_out": [
        "amount#0",
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "177": {
      "op": "swap",
      "stack_out": [
        "amount#0",
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "178": {
      "op": "btoi",
      "defined_out": [
        "amount#0",
        "current#0",
        "exists#0"
      ],
      "stack_out": [
        "amount#0",
        "exists#0",
        "current#0"
      ]
    },
    "179": {
      "op": "swap",
      "stack_out": [
        "amount#0",
        "current#0",
        "exists#0"
      ]
    },
    "180": {
      "error": "No deposits found for this account",
      "op": "assert // No deposits found for this account",
      "stack_out": [
        "amount#0",
        "current#0"
      ]
    },
    "181": {
      "op": "dig 1",
      "defined_out": [
        "amount#0",
        "amount#0 (copy)",
        "current#0"
      ],
      "stack_out": [
        "amount#0",
        "current#0",
        "amount#0 (copy)"
      ]
    },
    "183": {
      "error": "Withdrawal amount must be greater than zero",
      "op": "assert // Withdrawal amount must be greater than zero",
      "stack_out": [
        "amount#0",
        "current#0"
      ]
    },
    "184": {
      "op": "dup2",
      "defined_out": [
        "amount#0",
        "amount#0 (copy)",
        "current#0",
        "current#0 (copy)"
      ],
      "stack_out": [
        "amount#0",
        "current#0",
        "amount#0 (copy)",
        "current#0 (copy)"
      ]
    },
    "185": {
      "op": "<=",
      "defined_out": [
        "amount#0",
        "current#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "amount#0",
        "current#0",
        "tmp%1#1"
      ]
    },
    "186": {
      "error": "Withdrawal amount exceeds balance",
      "op": "assert // Withdrawal amount exceeds balance",
      "stack_out": [
        "amount#0",
        "current#0"
      ]
    },
    "187": {
      "op": "itxn_begin"
    },
    "188": {
      "op": "txn Sender",
      "defined_out": [
        "amount#0",
        "current#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "amount#0",
        "current#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "190": {
      "op": "dig 2",
      "stack_out": [
        "amount#0",
        "current#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "amount#0 (copy)"
      ]
    },
    "192": {
      "op": "itxn_field Amount",
      "stack_out": [
        "amount#0",
        "current#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "194": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "amount#0",
        "current#0"
      ]
    },
    "196": {
      "op": "intc_0 // pay",
      "defined_out": [
        "amount#0",
        "current#0",
        "pay"
      ],
      "stack_out": [
        "amount#0",
        "current#0",
        "pay"
      ]
    },
    "197": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "amount#0",
        "current#0"
      ]
    },
    "199": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "amount#0",
        "current#0"
      ],
      "stack_out": [
        "amount#0",
        "current#0",
        "0"
      ]
    },
    "200": {
      "op": "itxn_field Fee",
      "stack_out": [
        "amount#0",
        "current#0"
      ]
    },
    "202": {
      "op": "itxn_submit"
    },
    "203": {
      "op": "swap",
      "stack_out": [
        "current#0",
        "amount#0"
      ]
    },
    "204": {
      "op": "-",
      "defined_out": [
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0"
      ]
    },
    "205": {
      "op": "dup",
      "defined_out": [
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "remaining#0"
      ]
    },
    "206": {
      "op": "bnz withdraw_else_body@4",
      "stack_out": [
        "remaining#0"
      ]
    },
    "209": {
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%1#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "materialized_values%1#0"
      ]
    },
    "211": {
      "op": "box_del",
      "defined_out": [
        "remaining#0",
        "{box_del}"
      ],
      "stack_out": [
        "remaining#0",
        "{box_del}"
      ]
    },
    "212": {
      "op": "pop",
      "stack_out": [
        "remaining#0"
      ]
    },
    "213": {
      "block": "withdraw_after_if_else@5",
      "stack_in": [
        "remaining#0"
      ],
      "op": "dup",
      "defined_out": [
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "remaining#0"
      ]
    },
    "214": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "215": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "216": {
      "op": "swap",
      "stack_out": [
        "remaining#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "217": {
      "op": "concat",
      "defined_out": [
        "remaining#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "remaining#0",
        "tmp%4#0"
      ]
    },
    "218": {
      "op": "log",
      "stack_out": [
        "remaining#0"
      ]
    },
    "219": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "1"
      ]
    },
    "220": {
      "op": "return",
      "stack_out": [
        "remaining#0"
      ]
    },
    "221": {
      "block": "withdraw_else_body@4",
      "stack_in": [
        "remaining#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%2#0"
      ],
      "stack_out": [
        "remaining#0",
        "materialized_values%2#0"
      ]
    },
    "223": {
      "op": "dig 1",
      "defined_out": [
        "materialized_values%2#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "materialized_values%2#0",
        "remaining#0"
      ]
    },
    "225": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "materialized_values%2#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "materialized_values%2#0",
        "encoded_value%0#0"
      ]
    },
    "226": {
      "op": "box_put",
      "stack_out": [
        "remaining#0"
      ]
    },
    "227": {
      "op": "b withdraw_after_if_else@5"
    }
  }
}