#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock "count"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/counter/contract.py:10
    // self.count = UInt64(0)
    bytec_0 // "count"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/counter/contract.py:5
    // class Counter(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@7
    pushbytes 0x36e72924 // method "incr_counter()uint64"
    txna ApplicationArgs 0
    match main_incr_counter_route@5
    err

main_incr_counter_route@5:
    // smart_contracts/counter/contract.py:16
    // @abimethod()
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b incr_counter

main___algopy_default_create@7:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// smart_contracts.counter.contract.Counter.incr_counter[routing]() -> void:
incr_counter:
    // smart_contracts/counter/contract.py:18
    // self.count += UInt64(1)
    intc_0 // 0
    bytec_0 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_1 // 1
    +
    bytec_0 // "count"
    dig 1
    app_global_put
    // smart_contracts/counter/contract.py:16
    // @abimethod()
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return
